from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from study_buddy_bot.db import AsyncSessionLocal
from study_buddy_bot.handlers.common import router
from study_buddy_bot.models import Task, User
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime, date


router = Router()

class AddTaskStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_deadline = State()

class EditTaskStates(StatesGroup):
    waiting_for_task_number = State()
    waiting_for_edit_field = State()
    waiting_for_new_value = State()

@router.message(Command("add"))
async def add_task_state(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTaskStates.waiting_for_text)

@router.message(AddTaskStates.waiting_for_text, F.text)
async def add_task_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        return
    await state.update_data(task_text=text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(AddTaskStates.waiting_for_deadline)

@router.message(AddTaskStates.waiting_for_deadline, F.text)
async def add_task_deadline(message: Message, state: FSMContext):
    try:
        input_date = message.text.strip()
        task_deadline = datetime.strptime(input_date, "%Y-%m-%d").date()
        if task_deadline < date.today():
            await message.answer("–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):")
            return
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    data = await state.get_data()
    task_text = data["task_text"]

    # –ù–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    async with AsyncSessionLocal() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
        task = Task(
            user_id=user.id,
            description=task_text,
            deadline=task_deadline,
            created_at=datetime.utcnow(),
            is_done=False
        )
        session.add(task)
        await session.commit()

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"–¢–µ–∫—Å—Ç: <b>{task_text}</b>\n"
        f"–î–µ–¥–ª–∞–π–Ω: <b>{task_deadline}</b>",
        parse_mode="HTML"
    )
    await state.clear()

    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º list_tasks, –ø–µ—Ä–µ–¥–∞—ë–º message
    await list_tasks(message)

@router.message(Command("edit"))
async def edit_task_start(message: Message, state: FSMContext):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: /edit <–Ω–æ–º–µ—Ä>")
        return
    await state.update_data(edit_task_number=int(parts[1]))
    await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏: —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω.")
    await state.set_state(EditTaskStates.waiting_for_edit_field)

@router.message(EditTaskStates.waiting_for_edit_field, F.text)
async def edit_task_choose_field(message: Message, state: FSMContext):
    field = message.text.strip().lower()
    if field not in ("—Ç–µ–∫—Å—Ç", "–¥–µ–¥–ª–∞–π–Ω"):
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç—ã: —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(edit_field=field)
    if field == "—Ç–µ–∫—Å—Ç":
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    else:
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(EditTaskStates.waiting_for_new_value)

@router.message(EditTaskStates.waiting_for_new_value, F.text)
async def edit_task_update_value(message: Message, state: FSMContext):
    data = await state.get_data()
    task_number = data["edit_task_number"]
    field = data["edit_field"]
    new_value = message.text.strip()

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∑–∞–¥–∞—á
    async with AsyncSessionLocal() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ /start.")
            await state.clear()
            return

        stmt = (
            select(Task)
            .where(Task.user_id == user.id)
            .order_by(Task.is_done, Task.deadline)
        )
        result = await session.execute(stmt)
        tasks = result.scalars().all()

        if not tasks or task_number < 1 or task_number > len(tasks):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            await state.clear()
            return

        task = tasks[task_number - 1]
        if field == "—Ç–µ–∫—Å—Ç":
            if not new_value:
                await message.answer("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return
            task.description = new_value
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            try:
                deadline = datetime.strptime(new_value, "%Y-%m-%d").date()
                if deadline < date.today():
                    await message.answer("–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
                    return
                task.deadline = deadline
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
                return

        await session.commit()

    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await state.clear()
    await list_tasks(message)

@router.message(Command("delete"))
async def delete_task(message: Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete <–Ω–æ–º–µ—Ä>")
        return
    task_number = int(parts[1])

    async with AsyncSessionLocal() as session:
        # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ /start.")
            return

        # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = (
            select(Task)
            .where(Task.user_id == user.id)
            .order_by(Task.is_done, Task.deadline)
        )
        result = await session.execute(stmt)
        tasks = result.scalars().all()

        if not tasks or task_number < 1 or task_number > len(tasks):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π /list —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä.")
            return

        task = tasks[task_number - 1]
        session.delete(task)
        await session.commit()

    await message.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await list_tasks(message)

@router.message(Command("list"))
async def list_tasks(message: Message):
    async with AsyncSessionLocal() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ /start.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É, –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É
        stmt = (
            select(Task)
            .where(Task.user_id == user.id)
            .order_by(Task.is_done, Task.deadline)
        )
        result = await session.execute(stmt)
        tasks = result.scalars().all()

        if not tasks:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–π /add —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é!")
            return

        msg = "<b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:</b>\n"
        for i, task in enumerate(tasks, 1):
            status = "‚úÖ" if task.is_done else "üü°"
            deadline = task.deadline.strftime("%Y-%m-%d")
            msg += f"{i}. <b>{task.description}</b> (–¥–æ {deadline}) {status}\n"

        await message.answer(msg, parse_mode="HTML")

@router.message(Command("done"))
async def done_task(message: Message):
    # –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞: /done 2
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: /done <–Ω–æ–º–µ—Ä>")
        return
    task_number = int(parts[1])

    async with AsyncSessionLocal() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ /start.")
            return

        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚Äî –∫–∞–∫ –≤ /list)
        stmt = (
            select(Task)
            .where(Task.user_id == user.id)
            .order_by(Task.is_done, Task.deadline)
        )
        result = await session.execute(stmt)
        tasks = result.scalars().all()

        if not tasks or task_number < 1 or task_number > len(tasks):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π /list —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä.")
            return

        task = tasks[task_number - 1]
        if task.is_done:
            await message.answer("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            return

        task.is_done = True
        task.done_at = datetime.utcnow()
        await session.commit()

        await message.answer(f"–ó–∞–¥–∞—á–∞ <b>{task.description}</b> –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! ‚úÖ", parse_mode="HTML")
